apply plugin: "java"
apply plugin: "c"

// Find JNI directories
def JNI_BASE_DIR
if (new File(System.properties["java.home"], "include").exists()) {
	JNI_BASE_DIR = System.properties["java.home"]
} else {
	JNI_BASE_DIR = System.properties["java.home"] + "/.."
}
def JNI_INCLUDE_DIR = JNI_BASE_DIR + "/include"
def JNI_LIB_DIR = JNI_BASE_DIR + "/lib"

println "Found JNI include directory: " + JNI_INCLUDE_DIR

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'com.google.guava', name: 'guava', version: '25.1-jre'

	testImplementation group: 'junit', name: 'junit', version: '4.+'
	testImplementation group: 'com.tngtech.java', name: 'junit-dataprovider', version: '1.10+'
}

model {
	repositories {
		libs(PrebuiltLibraries) {
			yices {
				binaries.withType(SharedLibraryBinary) {
					sharedLibraryFile = file(projectDir.getPath() + "/libs/libyices.so")
				}
			}
		}
	}

	binaries {
		withType(SharedLibraryBinarySpec) {
			cCompiler.args "-I" + JNI_INCLUDE_DIR, "-I" + JNI_INCLUDE_DIR + "/linux"

			if (component.baseName == "yicesjni") {
				lib library: "yices", linkage: "shared"
			}
		}
		withType(StaticLibraryBinarySpec) {
			cCompiler.args "-I" + JNI_INCLUDE_DIR, "-I" + JNI_INCLUDE_DIR + "/linux"
		}
	}

	components {
		yicesjni(NativeLibrarySpec) {
			sources {
				c {
					source {
						srcDir "src/main/c"
						include "yices/*.c"
					}
					exportedHeaders {
						srcDir "src/main/c/yices"
					}
				}
			}
		}
	}
}

sourceSets {
	testData {
		java {
			compileClasspath += main.output
			runtimeClasspath += main.output
		}
	}

	test {
		java {
			compileClasspath += testData.output
			runtimeClasspath += testData.output
		}
	}
}

configurations {
	testDataCompile.extendsFrom implementation
	testDataRuntime.extendsFrom runtime

	testImplementation.extendsFrom testDataCompile
	testRuntime.extendsFrom testDataRuntime
}

tasks.withType(JavaCompile) {
	options.compilerArgs << '-Xlint:unchecked'
	options.deprecation = true
}

test {
	environment "LD_LIBRARY_PATH", "libs:build/libs/yicesjni/shared"
	systemProperty "java.library.path", "libs:build/libs/yicesjni/shared"
}

classes.dependsOn 'yicesjniSharedLibrary'

// Task to run the synthesizer shell
task synthShell(description: "Runs a shell for the synthesizer", type: JavaExec) {
	doFirst {
		if (gradle.startParameter.consoleOutput != ConsoleOutput.Plain) {
			throw new GradleScriptException("synthShell requires --console=plain", null)
		}
	}

	classpath = sourceSets.main.runtimeClasspath

	jvmArgs "-ea"

	main "synth.SynthesizerShell"

	environment.put("LD_LIBRARY_PATH", "libs:build/libs/yicesjni/shared")

	standardInput = System.in
	standardOutput = System.out
}
synthShell.dependsOn 'classes'

build.dependsOn 'jar'
